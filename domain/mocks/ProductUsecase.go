// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import (
	context "context"
	"product-stock-web-service/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductUsecase is an autogenerated mock type for the ProductUsecase type
type ProductUsecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ProductUsecase) Delete(ctx context.Context, id *int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, *id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx
func (_m *ProductUsecase) Fetch(ctx context.Context) ([]*domain.Product, error) {
	ret := _m.Called(ctx)

	var r0 []*domain.Product
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Product)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r2
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *ProductUsecase) Store(_a0 context.Context,_a1 *domain.Product) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Product) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, product
func (_m *ProductUsecase) Update(ctx context.Context, product *domain.Product) error {
	ret := _m.Called(ctx, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
